# Задача:
# Выберите одну или несколько сторонних библиотек Python, например, requests, pandas, numpy, matplotlib, pillow.
# После выбора библиотек(-и) изучите документацию к ней(ним), ознакомьтесь с их основными возможностями и функциями.
# К каждой библиотеке дана ссылка на документацию ниже.
# Если вы выбрали:
# requests - запросить данные с сайта и вывести их в консоль.
# pandas - считать данные из файла, выполнить простой анализ данных (на своё усмотрение) и вывести результаты в консоль.
# numpy - создать массив чисел, выполнить математические операции с массивом и вывести результаты в консоль.
# matplotlib - визуализировать данные с помощью библиотеки любым удобным для вас инструментом из библиотеки.
# pillow - обработать изображение, например, изменить его размер, применить эффекты и сохранить в другой формат.
# В приложении к ссылке на GitHub напишите комментарий о возможностях, которые предоставила вам выбранная библиотека
# и как вы расширили возможности Python с её помощью.
# Примечания:
# Можете выбрать не более 3-х библиотек для изучения.
# Желательно продемонстрировать от 3-х функций/классов/методов/операций из каждой выбранной библиотеки.

import requests

# Отправляем GET-запрос на сайт JSONPlaceholder для получения списка пользователей
response = requests.get('https://jsonplaceholder.typicode.com/users')

# Проверяем статус ответа
if response.status_code == 200:
    # Выводим содержимое в формате JSON
    users = response.json()
    for user in users:
        print(f"Name: {user['name']}, Email: {user['email']}")
else:
    print(f"Ошибка: {response.status_code}")

# 1. requests — HTTP библиотека для работы с веб-запросами
# requests позволяет легко отправлять HTTP-запросы, получать ответы и обрабатывать их.
# Это делает Python мощным инструментом для взаимодействия с веб-сайтами и API.
#
# Основные возможности библиотеки requests:
#  • Отправка различных HTTP-запросов (GET, POST, PUT, DELETE).
#  • Обработка ответов в формате JSON.
#  • Простая работа с заголовками и параметрами запросов.
#  Эта библиотека делает взаимодействие с веб-сервисами интуитивно понятным
# и минимизирует количество необходимого кода, предоставляя удобные методы для работы с HTTP-запросами.

import pandas as pd

# Считываем данные из CSV файла
df = pd.read_csv('data.csv')

# Выполняем простой анализ данных
print("Первые 5 строк таблицы:")
print(df.head())

# Описание данных: средние, медианы и прочие статистики
print("\nОсновные статистики данных:")
print(df.describe())

# Фильтрация данных: выберем строки, где значение в столбце 'age' больше 30
filtered_df = df[df['age'] > 30]
print("\nФильтрованные данные (возраст > 30):")
print(filtered_df)

# 2. pandas — мощная библиотека для анализа данных
# pandas предоставляет структуры данных для работы с таблицами (DataFrame)
# и позволяет производить широкий спектр операций для обработки и анализа данных.
#
# Основные возможности библиотеки pandas:
#  • Импорт данных из различных форматов (CSV, Excel, SQL, JSON).
#  • Мощные инструменты для фильтрации и манипуляции данными.
#  • Методы для анализа данных, такие как группировка и вычисление статистических показателей.
# С pandas Python становится мощным инструментом для обработки больших объемов данных
# и выполнения сложного анализа. Это значительно упрощает задачу работы с табличными данными.

import numpy as np

# Создаем массив из чисел от 0 до 9
arr = np.arange(10)
print("Исходный массив:")
print(arr)

# Выполняем математические операции: возведение в квадрат
squared_arr = np.square(arr)
print("\nМассив после возведения в квадрат:")
print(squared_arr)

# Создаем двумерный массив и вычисляем сумму по строкам и столбцам
matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print("\nДвумерный массив:")
print(matrix)

row_sums = np.sum(matrix, axis=1)
col_sums = np.sum(matrix, axis=0)
print("\nСумма по строкам:", row_sums)
print("Сумма по столбцам:", col_sums)

# 3. numpy — библиотека для работы с многомерными массивами
# numpy предоставляет возможность работать с многомерными массивами и производить над ними математические операции.
# Она оптимизирована для быстрого выполнения вычислений и часто используется для научных расчетов.
#
# Основные возможности библиотеки numpy:
#  • Работа с многомерными массивами и выполнение математических операций над ними.
#  • Векторизация операций для повышения производительности.
#  • Встроенные методы для линейной алгебры, статистики и других вычислений.
# numpy значительно расширяет математические возможности Python, делая его более подходящим
# для работы с большими данными и сложными вычислениями.
# Это основная библиотека для научных расчетов и машинного обучения.
