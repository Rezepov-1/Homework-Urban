# Задача "Многопроцессное считывание":
# Необходимо считать информацию из нескольких файлов одновременно, используя многопроцессный подход.
# Подготовка:
# Скачайте архив с файлами для считывания данных и распакуйте его в проект для дальнейшего использования.
# Выполнение:
# Создайте функцию read_info(name), где name - название файла. Функция должна:
# Создавать локальный список all_data.
# Открывать файл name для чтения.
# Считывать информацию построчно (readline), пока считанная строка не окажется пустой.
# Во время считывания добавлять каждую строку в список all_data.
# Этих операций достаточно, чтобы рассмотреть преимущество многопроцессного выполнения программы над линейным.
# Создайте список названий файлов в соответствии с названиями файлов архива.
# Вызовите функцию read_info для каждого файла по очереди (линейно) и измерьте время выполнения и выведите его в консоль.
# Вызовите функцию read_info для каждого файла, используя многопроцессный подход: контекстный менеджер with
#     и объект Pool. Для вызова функции используйте метод map, передав в него функцию read_info и список названий файлов.
#     Измерьте время выполнения и выведите его в консоль.
# Для избежания некорректного вывода запускайте линейный вызов и многопроцессный по отдельности,
# предварительно закомментировав другой.

import time
import multiprocessing

# Функция для считывания данных из файла
def read_info(name):
    all_data = []
    with open(name, 'r', encoding='utf-8') as f:
        while True:
            line = f.readline()
            if not line:
                break
            all_data.append(line)
    return all_data

# Список названий файлов (предположим, они называются file1.txt, file2.txt и т.д.)
filenames = [f'./file{number}.txt' for number in range(1, 5)]

# Линейный вызов
def linear_read():
    start_time = time.perf_counter()
    for filename in filenames:
        read_info(filename)
    end_time = time.perf_counter()
    print(f"Линейный вызов: {end_time - start_time:.6f} секунд")

# Многопроцессный вызов
def multiprocessing_read():
    start_time = time.perf_counter()
    with multiprocessing.Pool() as pool:
        pool.map(read_info, filenames)
    end_time = time.perf_counter()
    print(f"Многопроцессный вызов: {end_time - start_time:.6f} секунд")

# Вызов функций для измерения времени выполнения
if __name__ == '__main__':

# Линейный вызов
    linear_read()

# Многопроцессный вызов
    multiprocessing_read()